<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Transformer on ZQLog</title>
    <link>https://zqlqy.github.io/tags/transformer/</link>
    <description>Recent content in Transformer on ZQLog</description>
    <generator>Hugo -- 0.125.6</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 19 May 2024 11:30:13 +0800</lastBuildDate>
    <atom:link href="https://zqlqy.github.io/tags/transformer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DeformableDETR</title>
      <link>https://zqlqy.github.io/posts/deformabledetr/</link>
      <pubDate>Sun, 19 May 2024 11:30:13 +0800</pubDate>
      <guid>https://zqlqy.github.io/posts/deformabledetr/</guid>
      <description>DeformableDETR 1.DETR 1.1 简述 Detr将目标检测任务看作是集合预测问题，在每次将所有的object都做出预测，之后与GroundTruth进行二分图匹配，每一个object预测结果都会对应一个种类与位置(当然其中包含背景种类)；并且使用transformer来构建模型，对所有的objectquery来并行预测。
相比较以往的目标检测模型，DETR主要有以下几个创新点：
将目标检测任务看作是集合预测问题，并为此设计了损失函数，得到固定数量的object预测之后与真实值进行二分匹配，从而不需要以往的去重工作（如NMS） 使用transformer来并行预测与建模，不再需要先验知识(如anchor的设计) 总之，detr是首个真正的端到端目标检测模型，也是将transformer运用到目标检测任务中的首次尝试。
1.2损失函数（Object detection set prediction loss） DETR每次得出固定数量$N$ 的预测结果，当然$N$ 需要大于在图片中出现的物体数量，之后得出这些预测结果与真实值之间的最佳二分匹配，得出最佳匹配的方法表示如下：
其中，$y$ 代表所预测目标的真实值，当然其中包括物体的种类与位置；$\hat y={\hat y_i}{i=1}^{N}$ 表示对每个objectquery得到的预测结果,$\sigma(i)$ 则表示对于第$i$ 个预测结果所匹配到的groundtruth的索引，$\ell{match}(y_i,\hat y_{\sigma(i)})$ 表示二者之间的匹配成本。我们最终需要的使匹配成本最小的$\sigma$ 。当然这里可以使用匈牙利算法。
1.2.1匹配成本 这里的匹配成本同时考虑了物体的种类与位置，即$\hat y = (c_i,b_i)$ ,其中$c_i$表示物体种类，$b_i \in [0,1]^4$ 为包含ground box中心坐标与长、宽的向量。对于索引$\sigma(i)$ 我们将该索引对应的预测结果分类为$c_i$ 的概率表示为$p_{\sigma(i)}(c_i)$ ,将其预测的box表示为$\hat b_{\sigma (i)}$ ，因此可以将匹配成本函数定义为：$L_{match}(y_i, \hat y_{\sigma(i)}) =−1_{c_i\not=\emptyset}\hat p_{\sigma(i)}(c_i) + 1_{c_i\not=\emptyset} L_{box}(b_i, \hat b_{\sigma_i}(i))$ 。这样的过程与以往的目标检测算法中为anchor或者proposal分配真实值的工作效果相同，当然区别在与我们得到的是一一对应的匹配，不存在重复的问题。
1.2.2 标记框损失(Bounding box loss) 因为本模型是直接做出对于box的预测的，所以会遇到不同尺度下损失的相对缩放。常用的$l_1$ 损失会跟随预测框的大小产生缩放，即使这两种预测框的错误程度是相同的。而IoU损失的尺度是不变的，因此这里将$l_1$ 损失与IoU损失做线性组合，成为我们需要的boxloss，如下：
当然，其中$\lambda_{iou}$与$\lambda_{L_1}$ 都是超参数。
1.2.3 损失函数 之后就可以定义匹配的损失函数如下：
1.3 网络结构 (DETR architecture) 先上图</description>
    </item>
  </channel>
</rss>
